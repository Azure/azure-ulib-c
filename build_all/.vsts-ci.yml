name: $(BuildID)_$(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)
variables:
  runCodesignValidationInjection: false
resources:
- repo: self
  clean: true
phases:
- phase: checksubmodule  
  queue:
    name: Hosted Ubuntu 1604
  steps:
  - script: |
      sudo apt-get update && apt-get install -y \
      curl \
      git \
      python-software-properties \
      build-essential \
      pkg-config
      sudo curl -sL https://deb.nodesource.com/setup_6.x | bash -
      sudo apt-get install -y nodejs
    displayName: 'setup'  
  - script: |
      npm install check_submodules
      ./../../node_modules/.bin/check_submodules . master
    displayName: 'build'   
- phase: windowsx86
  queue:
    name: 'aziotbld-win03'
  variables:
    vcpkgTriplet: 'x86-windows-static'
    vcpkgPath: '%TEMP%\azuLibTestInfra\vcpkg'
  steps:
  - script: |
      echo VCPACK dir: $(vcpkgPath)
      if not exist $(vcpkgPath)\ (
        git clone https://github.com/Microsoft/vcpkg.git $(vcpkgPath)
        cd $(vcpkgPath)
        git checkout tags/2020.06
        call .\bootstrap-vcpkg.bat)
    displayName: 'install VCPKG'
  - script: |
      cd $(vcpkgPath)
      .\vcpkg.exe install --triplet $(vcpkgTriplet) cmocka
    displayName: 'get cmocka'
  - script: |
      if exist build_all\windows_c.cmd (
        call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\Tools\VsDevCmd.bat"
        set VCPKG_DEFAULT_TRIPLET=$(vcpkgTriplet)
        set VCPKG_ROOT=$(vcpkgPath)
        call build_all\windows_c.cmd)
    displayName: 'build'
  - script: cd .. && rd /Q /S $(Agent.BuildDirectory)\s
    displayName: 'cleanup'
    condition: always()
- phase: raspberrypi
  variables:
    _PREVIEW_VSTS_DOCKER_IMAGE: "aziotbld/raspberrypi-c"
  queue: Hosted Ubuntu 1604
  displayName: raspberrypi
  steps:
  - script: |
      if [ -f "build_all/raspberrypi_c.sh" ]
      then
        sudo ./build_all/raspberrypi_c.sh
      fi 
    displayName: 'build'  
  - script: sudo rm -rf $(Agent.BuildDirectory)/*
    displayName: 'cleanup'
- phase: ubuntu
  variables:
    _PREVIEW_VSTS_DOCKER_IMAGE: "aziotbld/linux-c-ubuntu:cmake3.19"
    vcpkgTriplet: 'x64-linux'
    vcpkgPath: '/tmp/azuLibTestInfra/vcpkg'
  queue: Hosted Ubuntu 1604
  displayName: 'ubuntu'
  steps:
  - script: |
      echo VCPACK dir: $(vcpkgPath)
      if [ ! -d "$(vcpkgPath)/" ]
      then
        sudo apt-get install -y curl unzip tar
        sudo apt-get install software-properties-common -y
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
        sudo apt-get update -y
        sudo apt-get install gcc-7 g++-7 -y
        git clone https://github.com/Microsoft/vcpkg.git $(vcpkgPath)
        cd $(vcpkgPath)
        git checkout tags/2020.06
        ./bootstrap-vcpkg.sh
      fi
    displayName: 'install VCPKG'
  - script: |
      cd $(vcpkgPath)
      ./vcpkg install --triplet $(vcpkgTriplet) cmocka
    displayName: 'get cmocka'
  - script: |
      if [ -f "build_all/linux_c_ubuntu.sh" ]
      then
        sudo chmod -R 755 .
        sudo -E ./build_all/linux_c_ubuntu.sh
      fi
    displayName: 'build'
    env:
      VCPKG_DEFAULT_TRIPLET: $(vcpkgTriplet)
      VCPKG_ROOT: $(vcpkgPath)
  - script: sudo rm -rf $(Agent.BuildDirectory)/*
    displayName: 'cleanup'
    condition: always()
- phase: linuxoptions
  variables:
    _PREVIEW_VSTS_DOCKER_IMAGE: "aziotbld/vsts-linux-c-ubuntu"
  queue: Hosted Ubuntu 1604
  displayName: 'linux-options'
  steps:
  - script: | 
      if [ -f "build_all/linux_c_option_test.sh" ]
      then 
        sudo ./build_all/linux_c_option_test.sh
      fi
    displayName: 'build'
    condition: always()
  - script: sudo rm -rf $(Agent.BuildDirectory)/*
    displayName: 'cleanup'
    condition: always()    
- phase: OSX
  queue:
    name: Hosted macOS
  steps:
  - script: |
      ./build_all/osx_xcode_native.sh
    displayName: 'build'
  - script: sudo rm -rf $(Agent.BuildDirectory)/*
    displayName: 'cleanup'
    condition: always() 
- phase: windowsdynamic
  queue:
    name: 'aziotbld-win03'
  steps:
  - script: |
      if exist build_all\windows_c_build_as_dynamic.cmd (
        call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\Tools\VsDevCmd.bat"
        call build_all\windows_c_build_as_dynamic.cmd)
    displayName: 'build'
  - script: cd .. && rd /Q /S $(Agent.BuildDirectory)\s
    displayName: 'cleanup'
    condition: always()      
- phase: clang
  variables:
    _PREVIEW_VSTS_DOCKER_IMAGE: "aziotbld/ubuntu-clang"
    vcpkgTriplet: 'x64-linux'
    vcpkgPath: '/tmp/azuLibTestInfra/vcpkg'
  queue: aziotbld-lin01
  displayName: 'clang'
  steps:
  - script: |
      echo VCPACK dir: $(vcpkgPath)
      if [ ! -d "$(vcpkgPath)/" ]
      then
        sudo apt-get install -y curl unzip tar
        git clone https://github.com/Microsoft/vcpkg.git $(vcpkgPath)
        cd $(vcpkgPath)
        git checkout tags/2020.06
        ./bootstrap-vcpkg.sh
      fi
    displayName: 'install VCPKG'
  - script: |
      cd $(vcpkgPath)
      ./vcpkg install --triplet $(vcpkgTriplet) cmocka
    displayName: 'get cmocka'
  - script: |
      if [ -f "build_all/ubuntu_clang.sh" ]
      then
        export OPENSSL_ia32cap=0x00000000
        sudo chmod -R 755 .
        sudo -E ./build_all/ubuntu_clang.sh
      fi
    displayName: 'build'
    env:
      VCPKG_DEFAULT_TRIPLET: $(vcpkgTriplet)
      VCPKG_ROOT: $(vcpkgPath)
  - script: sudo rm -rf $(Agent.BuildDirectory)/*
    displayName: 'cleanup'
    condition: always()    
- phase: debian
  variables:
    _PREVIEW_VSTS_DOCKER_IMAGE: "aziotbld/c-debian"
    vcpkgTriplet: 'x64-linux'
    vcpkgPath: '/tmp/azuLibTestInfra/vcpkg'
  queue: c-df
  displayName: 'debian'
  steps:
  - script: |
      echo VCPACK dir: $(vcpkgPath)
      if [ ! -d "$(vcpkgPath)/" ]
      then
        sudo apt-get install -y curl unzip tar
        git clone https://github.com/Microsoft/vcpkg.git $(vcpkgPath)
        cd $(vcpkgPath)
        git checkout tags/2020.06
        ./bootstrap-vcpkg.sh
      fi
    displayName: 'install VCPKG'
  - script: |
      cd $(vcpkgPath)
      ./vcpkg install --triplet $(vcpkgTriplet) cmocka
    displayName: 'get cmocka'
  - script: |
      if [ -f "build_all/debian_c.sh" ]
      then
        sudo chmod 755 build_all/debian_c.sh
        sudo -E ./debian_c.sh
        sudo build_all/debian_c.sh
      fi
    displayName: 'build'
    env:
      VCPKG_DEFAULT_TRIPLET: $(vcpkgTriplet)
      VCPKG_ROOT: $(vcpkgPath)
  - script: sudo rm -rf $(Agent.BuildDirectory)/*
    displayName: 'cleanup'
    condition: always()    
- phase: windowsx64
  queue:
    name: 'aziotbld-win03'
  displayName: 'windowsx64'
  variables:
    vcpkgTriplet: 'x64-windows-static'
    vcpkgPath: '%TEMP%\azuLibTestInfraX64\vcpkg'
  steps:
  - script: |
      echo VCPACK dir: $(vcpkgPath)
      if not exist $(vcpkgPath)\ (
        git clone https://github.com/Microsoft/vcpkg.git $(vcpkgPath)
        cd $(vcpkgPath)
        git checkout tags/2020.06
        call .\bootstrap-vcpkg.bat)
    displayName: 'install VCPKG'
  - script: |
      cd $(vcpkgPath)
      .\vcpkg.exe install --triplet $(vcpkgTriplet) cmocka
    displayName: 'get cmocka'
  - script: |
      if exist build_all\windows_c.cmd (
        call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\Tools\VsDevCmd.bat"
        set VCPKG_DEFAULT_TRIPLET=$(vcpkgTriplet)
        set VCPKG_ROOT=$(vcpkgPath)
        call build_all\windows_c.cmd --platform x64)
    displayName: 'build'
  - script: cd .. && rd /Q /S $(Agent.BuildDirectory)\s
    displayName: 'cleanup'
    condition: always()    
