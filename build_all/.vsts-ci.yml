name: $(BuildID)_$(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)
variables:
  runCodesignValidationInjection: false
resources:
- repo: self
  clean: true
jobs:
- job: checksubmodule  
  pool:
    name: Hosted Ubuntu 1604
  steps:
  - script: |
      sudo apt-get update && apt-get install -y \
      curl \
      git \
      python-software-properties \
      build-essential \
      pkg-config
      sudo curl -sL https://deb.nodesource.com/setup_6.x | bash -
      sudo apt-get install -y nodejs
    displayName: 'setup'  
  - script: |
      npm install check_submodules
      ./../../node_modules/.bin/check_submodules . master
    displayName: 'build'   
- job: windowsx86
  pool: 
    vmImage: 'vs2017-win2016'
  steps:
  - script: |
     if exist build_all\windows_c.cmd (
      call build_all\windows_c.cmd)
    displayName: 'build'
- job: raspberrypi
  variables:
    _PREVIEW_VSTS_DOCKER_IMAGE: "aziotbld/raspberrypi-c"
  pool: Hosted Ubuntu 1604
  displayName: raspberrypi
  steps:
  - script: |
     if [ -f "build_all/raspberrypi_c.sh" ]
     then
      sudo ./build_all/raspberrypi_c.sh
     fi 
    displayName: 'build'  
  - script: sudo rm -rf $(Agent.BuildDirectory)/*
    displayName: 'cleanup'
- job: ubuntu
  variables:
    _PREVIEW_VSTS_DOCKER_IMAGE: "aziotbld/linux-c-ubuntu:cmake3.19"
  pool: Hosted Ubuntu 1604
  displayName: 'ubuntu'
  steps:
  - script: |
     if [ -f "build_all/linux_c_ubuntu.sh" ]
     then
      sudo chmod -R 755 .
      sudo -E ./build_all/linux_c_ubuntu.sh
     fi
    displayName: 'build'  
  - script: sudo rm -rf $(Agent.BuildDirectory)/*
    displayName: 'cleanup'
    condition: always()
- job: linuxoptions
  variables:
    _PREVIEW_VSTS_DOCKER_IMAGE: "aziotbld/vsts-linux-c-ubuntu"
  pool: Hosted Ubuntu 1604
  displayName: 'linux-options'
  steps:
  - script: | 
     if [ -f "build_all/linux_c_option_test.sh" ]
     then 
      sudo ./build_all/linux_c_option_test.sh
     fi
    displayName: 'build'
    condition: always()
  - script: sudo rm -rf $(Agent.BuildDirectory)/*
    displayName: 'cleanup'
    condition: always()    
- job: OSX
  pool:
    name: Hosted macOS
  steps:
  - script: |
      ./build_all/osx_xcode_native.sh
    displayName: 'build'
  - script: sudo rm -rf $(Agent.BuildDirectory)/*
    displayName: 'cleanup'
    condition: always() 
- job: windowsdynamic
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - script: |
     if exist build_all\windows_c_build_as_dynamic.cmd (
      call build_all\windows_c_build_as_dynamic.cmd)
    displayName: 'build'    
- job: clang
  variables:
    _PREVIEW_VSTS_DOCKER_IMAGE: "aziotbld/ubuntu-clang"
  pool: Hosted Ubuntu 1604
  displayName: 'clang'
  steps:
  - script: |
     if [ -f "build_all/ubuntu_clang.sh" ]
     then
      export OPENSSL_ia32cap=0x00000000
      sudo chmod -R 755 .
      sudo -E ./build_all/ubuntu_clang.sh
     fi
    displayName: 'build'
  - script: sudo rm -rf $(Agent.BuildDirectory)/*
    displayName: 'cleanup'
    condition: always()    
- job: debian
  variables:
    _PREVIEW_VSTS_DOCKER_IMAGE: "aziotbld/c-debian"
  pool: Hosted Ubuntu 1604
  displayName: 'debian'
  steps:
  - script: |
     if [ -f "build_all/debian_c.sh" ]
     then
      sudo chmod 755 build_all/debian_c.sh
      sudo -E ./debian_c.sh
      sudo build_all/debian_c.sh
     fi
    displayName: 'build'
  - script: sudo rm -rf $(Agent.BuildDirectory)/*
    displayName: 'cleanup'
    condition: always()    
- job: windowsx64
  pool:
    vmImage: 'vs2017-win2016'
  displayName: 'windowsx64'
  steps:
  - script: |
     if exist build_all\windows_c.cmd (
      call build_all\windows_c.cmd --platform x64)
    displayName: 'build'